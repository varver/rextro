{"name":"Rextro","tagline":"Rextro is an golang api consumer,make api calls easily using this library and specially read json response easily.","body":"#Rextro\r\n[Rextro](https://github.com/varver/rextro) is a simple api consumer in golang (go) , make api calls easily using this library.\r\nEasily read json response values like : **response.success** if response looks like : \r\n**{\"response\" : {\"success\" : true, \"error\" : \"none\" , \"code\" : \"200\"}}**\r\n\r\nSee examples below for better understanding and usage.\r\n\r\n\r\n#Installation\r\n```\r\ngo get -u -v github.com/varver/rextro\r\n```\r\n\r\n#How to Use ?\r\n\r\nFor example lets say you want to use this api : \r\nhttps://www.mashape.com/imagevision/nudity-recognition-nudity-filter-for-images\r\n\r\n**The curl request looks like this**\r\n```\r\ncurl -X POST --include 'https://nuditysearch.p.mashape.com/nuditySearch/image' \\\r\n  -H 'X-Mashape-Key: ad40Z3nH9NmdfgdfgfdgdfgfdgdfgfdgfdgfdgdfgfgAum8J6' \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -H 'Accept: application/json' \\\r\n  -d 'objecturl=http://i.imgur.com/4hGni1I.jpg' \\\r\n  -d 'setting=3'\r\n```\r\n\r\n**Json Response looks like this**\r\n```\r\n{\r\n  \"version\": \"config_v8_2014-01-31\",\r\n  \"message\": \"SUCCESS\",\r\n  \"transactionid\": \"1234\",\r\n  \"objecturl\": \"http://i.imgur.com/4hGni1I.jpg\",\r\n  \"setting\": 2,\r\n  \"score\": 94,\r\n  \"classification\": \"NUDITY\"\r\n}\r\n```\r\n\r\n**This is how the code will look like to make above call**\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/varver/rextro\"\r\n)\r\n\r\nfunc Mashape(image string, api_key string) {\r\n\treq := rextro.NewTequest(\"https://nuditysearch.p.mashape.com/nuditySearch/image\")\r\n\r\n\t//headers to be sent\r\n\treq.Headers[\"X-Mashape-Key\"] = api_key\r\n\treq.Headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\r\n\treq.Headers[\"Accept\"] = \"application/json\"\r\n\r\n\t// parameters to be sent\r\n\treq.Body[\"setting\"] = \"2\"\r\n\treq.Body[\"objecturl\"] = image\r\n\r\n\t// get response as json converted // you can also make 'GET' request instead of 'POST'\r\n\tcontainer, err := req.FetchJson(\"POST\")\r\n\tif err != nil {\r\n\t\tfmt.Println(err.Error())\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(container.String())\r\n\r\n\t/*\r\n\t\t// use this to get raw response as byte array\r\n\t\t// byteArray , err := req.Fetch(\"POST\")\r\n\r\n\t\t// OR\r\n\r\n\t\t// use this to get response as a string\r\n\t\t// respString , err := req.FetchString(\"POST\")\r\n\r\n\t\t// The Request is internally done using https://godoc.org/net/http#NewRequest\r\n\t*/\r\n\r\n\t//////////////////////////////////////////////////////////////////\r\n\t/// Lets fetch json values from Response looks like this ////////\r\n\t/////////////////////////////////////////////////////////////////\r\n\t/*\r\n\t\t{\r\n\t\t  \"version\": \"config_v8_2014-01-31\",\r\n\t\t  \"message\": \"SUCCESS\",\r\n\t\t  \"transactionid\": \"1234\",\r\n\t\t  \"objecturl\": \"http://i.imgur.com/4hGni1I.jpg\",\r\n\t\t  \"setting\": 2,\r\n\t\t  \"score\": 94,\r\n\t\t  \"classification\": \"NUDITY\"\r\n\t\t}\r\n\t*/\r\n\r\n\tmessage := container.Path(\"message\").Data().(string)\r\n\tif message == \"SUCCESS\" {\r\n\t\tfmt.Println(container.Path(\"classification\").Data().(string))\r\n\t} else {\r\n\t\tfmt.Print(\"Something went wrong\")\r\n\t}\r\n\r\n}\r\n\r\nfunc main() {\r\n\tkey := \"YOUR_API_KEY\"\r\n\timage_url := \"http://i.imgur.com/4hGni1I.jpg\"\r\n\tMashape(image_url, key)\r\n}\r\n\r\n```\r\n\r\n#Note\r\nThe package internally uses : https://github.com/Jeffail/gabs to parse json , you can refer its godoc here : https://godoc.org/github.com/Jeffail/gabs to do more stuff on FetchJson output , as it returns the <a href=\"https://godoc.org/github.com/Jeffail/gabs#Container\">Container</a> of gabs package. \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}